*Vital/Vim/Buffer/Anchor.txt*		Find a suitable anchor buffer

Version: 1.0.2
Author : Alisue <lambdalisue@hashnote.net>
License: MIT license
Support: Vim 7.4.001 and above
Support: Neovim 0.1.7 and above


==============================================================================
CONTENTS				*Vital.Vim.Buffer.Anchor-contents*

INTRODUCTIONS			|Vital.Vim.Buffer.Anchor-introductions|
USAGE				|Vital.Vim.Buffer.Anchor-usage|
FUNCTIONS			|Vital.Vim.Buffer.Anchor-functions|
CHANGELOG			|Vital.Vim.Buffer.Anchor-changelog|


==============================================================================
INTRODUCTIONS				*Vital.Vim.Buffer.Anchor-introductions*

This module is used to find/focus a suitable anchor buffer which is used for
opening a new buffer from a non-file buffer such as |quickfix| window.

Use this module to focus an anchor buffer prior to open a new buffer. For
example, if you are developing a file manager, use following code to open a
file under the cursor in your file manager buffer.
>
    call s:Anchor.focus()
    execute 'edit ' . getline('.')
<
Then your file manager buffer stays and a new buffer is opened at a window
which has been holding a file-like buffer.

Latest version:
https://github.com/lambdalisue/vital-Vim-Buffer-Anchor


==============================================================================
USAGE					*Vital.Vim.Buffer.Anchor-usage*

A default definition of a suitable buffer is:

- A buffer which |bufname()| returns an empty string (a new buffer)
- A buffer which |buflisted()| returns 1 (usually a file-like buffer is listed)
- A buffer which 'buftype' does not match to 'unsuitable_buftype_pattern'
- A buffer which |bufname()| does not match to 'unsuitable_bufname_pattern'
- A buffer which 'filetype' does not match to 'unsuitable_filetype_pattern'

These behaviors are configurable by |Vital.Vim.Buffer.Anchor.set_config()|.

The following code is an example simple file manager.
>
    let s:Anchor = vital#vital#import('Vim.Buffer.Anchor')

    function! s:open_file(opener) abort
      let filename = expand(getline('.'))
      " Note: focus() is not called when 'opener' is pedit or tabedit
      call s:Anchor.focus_if_available(a:opener)
      execute a:opener . ' ' . fnameescape(filename)
    endfunction

    function! s:open_file_manager(root) abort
      topleft 50 vsplit FileManager
      let candidates = split(glob(a:root . '/*'), "\r\\?\n")
      let candidates = filter(candidates, 'filereadable(v:val)')
      let candidates = map(candidates, 'fnamemodify(v:val, '':~:.'')')
      let candidates = ['File Manager'] + candidates
      call setline(1, candidates)
      nnoremap <buffer> e :<C-u>call <SID>open_file('ed')<CR>
      nnoremap <buffer> s :<C-u>call <SID>open_file('sp')<CR>
      nnoremap <buffer> v :<C-u>call <SID>open_file('vs')<CR>
      nnoremap <buffer> p :<C-u>call <SID>open_file('ped')<CR>
      nnoremap <buffer> t :<C-u>call <SID>open_file('tabe')<CR>
      " Attach an anchoring feature
      call s:Anchor.attach()
    endfunction

    command! FileManager call s:open_file_manager(getcwd())
<
==============================================================================
FUNCTIONS				*Vital.Vim.Buffer.Anchor-functions*

				*Vital.Vim.Buffer.Anchor.get_config()*
get_config()

	Return a config |Dictionary|. The following attributes are available:

	'disallow_preview'
	|Vital.Vim.Buffer.Anchor.is_suitable()| return 0 for a 'previewwindow'
	if this option is 1.
	Default: 0

	'buflisted_required'
	|Vital.Vim.Buffer.Anchor.is_suitable()| return 0 for non listed buffer
	if this option is 1.
	Default: 1

	'unsuitable_buftype_pattern'
	|Vital.Vim.Buffer.Anchor.is_suitable()| return 0 for a buffer which
	buftype follow this pattern.
	Default: '^\%(nofile\|quickfix\)$'

	'unsuitable_bufname_pattern'
	|Vital.Vim.Buffer.Anchor.is_suitable()| return 0 for a buffer which
	bufname follow this pattern.
	Default: ''

	'unsuitable_filetype_pattern'
	|Vital.Vim.Buffer.Anchor.is_suitable()| return 0 for a buffer which
	filetype follow this pattern.
	Default: ''

	Note that returned dictionary is a copy so inplace modification does
	not work. Use |Vital.Vim.Buffer.Anchor.set_config()| instead.

				*Vital.Vim.Buffer.Anchor.set_config()*
set_config({config})

	Set a config |Dictionary|. See |Vital.Vim.Buffer.Anchor.get_config()|
	for available attributes of {config}.

				*Vital.Vim.Buffer.Anchor.is_available()*
is_available({opener})

	Return if anchoring is required or not for {opener}.
	For example, anchoring prior to 'pedit' or 'tabedit' may not required
	and this method return 0 for such {opener}.
	See also |Vital.Vim.Buffer.Anchor.focus_if_available()|.

				*Vital.Vim.Buffer.Anchor.is_suitable()*
is_suitable({winnum})

	Return if {winnum} is suitable to used as an anchor.
	The behavior of this method is rely on the config.
	See |Vital.Vim.Buffer.Anchor.get_config()|.

				*Vital.Vim.Buffer.Anchor.find_suitable()*
find_suitable({winnum}[, {reverse}])

	Find a next suitable window and return |winnr|.
	If no suitable window is found, it returns 0.
	If {reverse} is specified, it try to find a previous suitable window
	instead. The term next or previous used in this paragraph is
	geometrical order. See |winnr| for numbering detail.

				*Vital.Vim.Buffer.Anchor.focus()*
focus([{reverse}])

	Focus a next suitable window with |keepjumps|.
	If no suitable window is found, it focus a previous window obtained
	by winnr('#').
	If {reverse} is specified, it try to focus a previous suitable window
	instead.
	See also |Vital.Vim.Buffer.Anchor.focus_if_available()|.

				*Vital.Vim.Buffer.Anchor.focus_if_available()*
focus_if_available({opener}[, {reverse}])

	Focus a next suitable window with |keepjumps| when {openre} is an
	available opener such as 'edit'.
	This method is equivalent to the code below:
>
	if s:Anchor.is_available(opener)
	  call s:Anchor.focus(reverse)
	endif
<
	Using this method instead of using |Vital.Vim.Buffer.Anchor.focus()|
	directly is recommended.

				*Vital.Vim.Buffer.Anchor.attach()*
attach()

	Attach an anchoring feature to the current buffer.
	When an attached buffer is closed, a previous suitable buffer is
	automatically focused.

==============================================================================
CHANGELOG				*Vital.Vim.Buffer.Anchor-changelog*

1.0.2	2017-01-05
	- Refactoring the code
	- Improve documents
1.0.1	2016-09-01
	- Use a script-local variable instead of a global variable

1.0.0	2016-08-26
	- Initial stable version


==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
